<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN" 
 "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">

<svg xmlns="http://www.w3.org/2000/svg" 
 xmlns:xlink="http://www.w3.org/1999/xlink" 
 width='550px' height='300px'>

<title>{{ title }}</title>


<!-- 
  Pyramid for climbing ticks.  SVG template.
  Dave Baker <dave@dsb3.com>
  https://github.com/dsb3/pyramid/
-->

{# entire image data is omitted - left blank - unless we have anything to print #}
{% if not nodata %}

<!-- create border around frame -->
<rect x='0' y='0' width='550' height='300' style='fill: none; stroke: black; stroke-width: 2px' />


{% if debug %}
<!-- DEBUG: horiz/vertical alignment marks -->
<line x1="50" y1="0" x2="50" y2="300" style="stroke:rgb(255,0,0); stroke-width:1" />
<line x1="300" y1="0" x2="300" y2="300" style="stroke:rgb(255,0,0); stroke-width:1" />

<line x1="0" y1="75" x2="550" y2="75" style="stroke:rgb(255,0,0); stroke-width:1" />
<line x1="0" y1="135" x2="550" y2="135" style="stroke:rgb(255,0,0); stroke-width:1" />
<line x1="0" y1="195" x2="550" y2="195" style="stroke:rgb(255,0,0); stroke-width:1" />
<line x1="0" y1="255" x2="550" y2="255" style="stroke:rgb(255,0,0); stroke-width:1" />
{% endif %}


<!-- define crosshatch pattern -->
<pattern id="xhatch" width="5" height="5" patternTransform="rotate(45 0 0)" patternUnits="userSpaceOnUse">
  <line x1="0" y1="0" x2="0" y2="5" style="stroke:green; stroke-width:6" />
</pattern>


<!-- define open blue box -->
<defs>

<!-- pending : open blue box -->
<g id="pending">
<rect x='0' y='0' rx='5' ry='5' width='50' height='50'
  style='fill:none; stroke: blue; stroke-width: 2' transform="translate(-25, -25)" />
</g>

<!-- redpoint : pending + green shade -->
<g id="redpoint">
<use xlink:href="#pending"/>
<rect x='0' y='0' rx='7' ry='7' width='40' height='40'
  style='fill:green; stroke: none;' transform="translate(-20, -20)" />
</g>

<!-- flash : redpoint + darker diagonal -->
<g id="flash">
<use xlink:href="#redpoint"/>
<rect x='0' y='0' rx='7' ry='7' width='30' height='30' 
  style='fill:none; stroke: darkgreen; stroke-width:3;' transform="rotate(45, 0, 0) translate(-15, -15)" />
</g>

<!-- onsight : flash + another green shade -->
<g id="onsight">
<use xlink:href="#flash"/>
<rect x='0' y='0' rx='2' ry='2' width='20' height='20' 
  style='fill:none; stroke: darkgreen; stroke-width:3;' transform="rotate(45, 0, 0) translate(-10, -10)" />
</g>

<!-- cascade : pending + cross hatch -->
<g id="cascade">
<use xlink:href="#pending"/>
<rect x='0' y='0' rx='6' ry='6' width='40' height='40'
  style='fill:url(#xhatch)' transform="translate(-20, -20)" />
</g>

</defs>


{# HEADER LINES - note to center over blocks, x=300 but to center in plot x=275 #}

<text text-anchor="left" alignment-baseline='middle' x='10' y='25' font-size='30' fill='black'>{{ row1.title }}</text>


<text text-anchor="middle" alignment-baseline='middle' x='300' y='20' fill='black'>{{ title }}</text>
<text text-anchor="end"    alignment-baseline='middle' x='535' y='20' fill='black'>{{ date }}</text>


<!-- draw legend in top right blank space -->

<g opacity="0.66">

<g transform="translate(520, 60)">
<text text-anchor="end" alignment-baseline='middle'
      x='0' y='0' fill='black' transform="translate(-20)">Redpoint</text>
<use xlink:href="#redpoint" transform="scale(0.65)"/>
</g>


{# todo - dynamic j2 rendering of legend based on what appears in data set 
   for now, just hide flash/OS and shuffle cascaded/pending higher up.

<g transform="translate(520,100)">
<text text-anchor="end" alignment-baseline='middle'
      x='0' y='0' fill='black' transform="translate(-60)">Flash/OS</text>
<use xlink:href="#flash"   transform="scale(0.65) translate(-55)"/>
<use xlink:href="#onsight" transform="scale(0.65)"/>
</g>

#}

<g transform="translate(520, 100)">  {# 140 when f/os is back #}
<text text-anchor="end" alignment-baseline='middle'
      x='0' y='0' fill='black' transform="translate(-20)">Cascaded</text>
<use xlink:href="#cascade" transform="scale(0.65)"/>
</g>

<g transform="translate(520, 140)">  {# 180 when f/os is back #}
<text text-anchor="end" alignment-baseline='middle'
      x='0' y='0' fill='black' transform="translate(-20)">Pending</text>
<use xlink:href="#pending" transform="scale(0.65)"/>
</g>

<!-- end legend block -->
</g>



<!-- first row -->

{# the top block will often be empty, especially when only showing highest pyramid #}

{% if row1.count != "(0)" %}
<text x='25' y='70' fill='black' text-anchor='middle' alignment-baseline='baseline'>{{ row1.title }}</text> 
<text x='25' y='75' fill='black' text-anchor='middle' alignment-baseline='hanging'>{{  row1.count }}</text>
{% endif %}


<!-- "g" group of elements are all created at (0,0) with internal/relative transforms
     to center around the axis; then the whole group is transformed to locate in the
     correct spot on the canvas. -->

{% set yoff = 75 %}
{% for sq in row1.squares %}  {% set xoff = 300 + (loop.index - 1) * 60 %}
  <g transform="translate({{ xoff }}, {{ yoff }})">
  <use xlink:href="#{{ sq }}"/>
  </g>
{% endfor %}


<!-- second row -->
<text x='25' y='130' fill='black' text-anchor='middle' alignment-baseline='baseline'>{{ row2.title }}</text>
<text x='25' y='135' fill='black' text-anchor='middle' alignment-baseline='hanging'>{{  row2.count }}</text>

{% set yoff = 135 %}
{% for sq in row2.squares %}  {% set xoff = 270 + (loop.index - 1) * 60 %}
  <g transform="translate({{ xoff }}, {{ yoff }})">
  <use xlink:href="#{{ sq }}"/>
  </g>
{% endfor %}


<!-- third row -->
<text x='25' y='190' fill='black' text-anchor='middle' alignment-baseline='baseline'>{{ row3.title }}</text>
<text x='25' y='195' fill='black' text-anchor='middle' alignment-baseline='hanging'>{{  row3.count }}</text>

{% set yoff = 195 %}
{% for sq in row3.squares %}  {% set xoff = 210 + (loop.index - 1) * 60 %}
  <g transform="translate({{ xoff }}, {{ yoff }})">
  <use xlink:href="#{{ sq }}"/>
  </g>
{% endfor %}


<!-- fourth row -->
<text x='25' y='250' fill='black' text-anchor='middle' alignment-baseline='baseline'>{{ row4.title }}</text>
<text x='25' y='255' fill='black' text-anchor='middle' alignment-baseline='hanging'>{{  row4.count }}</text>

{% set yoff = 255 %}
{% for sq in row4.squares %}  {% set xoff = 90 + (loop.index - 1) * 60 %}
  <g transform="translate({{ xoff }}, {{ yoff }})">
  <use xlink:href="#{{ sq }}"/>
  </g>
{% endfor %}

{# endif for printing/not printing entire content set #}
{% endif %}

</svg>
